<div class="bg-white">
  <h1>Quote Generator</h1>
  <form name="generateQuoteForm">
    <input id="searchTerm" type="text" placeholder="My search term"/>

    <div id="searchResults"></div>

    <button
      name="search"
      type="button"
    >
      Search
    </button>

    <button
      name="feelingLucky"
      type="button"
    >I'm feeling lucky</button>

    <button
      name="confirm"
      type="button"
    >Confirm</button>
  </form>
</div>


<script type="text/javascript">
  document.generateQuoteForm.elements.search.onclick = () => searchQuotes(document.getElementById("searchTerm").value);
  document.generateQuoteForm.elements.feelingLucky.onclick = () => randomQuote();
  document.generateQuoteForm.elements.confirm.onclick = () => confirmQuote();

  const displaySearchResults = (results) => {
    console.log("results", results)
    var listDiv = document.getElementById('searchResults');
    listDiv.innerHTML = '';
    var ul = document.createElement('ul');
    for(var i = 0; i < results.length; ++i) {
      var li = document.createElement('li');
      var resultDisplay = document.createElement('div');
      resultDisplay.innerHTML = results[i];
      resultDisplay.onclick = (e) => {
        confirmQuote(e.target.innerHTML)
      }
      li.appendChild(resultDisplay);
      ul.appendChild(li);
    }
    listDiv.appendChild(ul);
  }

  function searchQuotes(searchTerm) {
    fetch(`http://ron-swanson-quotes.herokuapp.com/v2/quotes/search/${searchTerm}`)
      .then(response => response.json())
      .then(response => {
        displaySearchResults(response);
      })
  };

  function randomQuote() {
    fetch(`http://ron-swanson-quotes.herokuapp.com/v2/quotes/`)
      .then(response => response.json())
      .then(response => {
        displaySearchResults(response);
      })
  };

  function confirmQuote(quote) {
    const composerAppData = {
      type: "body",
      attributes: {
        text: quote,
        isEditable: true
      },
      dynamicSend: {
        url: "http://localhost:4444/dynamic"
      }
    };
    if (window.ReactNativeWebView) {
      //call into Mobile React Native WebView
      window.ReactNativeWebView.postMessage(
        JSON.stringify({
          composerAppData
        })
      );
    } else if (window.parent) {
      //call into Web iFrame
      window.parent.postMessage(
        {
          composerAppData
        },
        "*"
      );
    } else {
      throw new Error(
        `could not find WebView or iFrame to mount Composer App on.`
      );
    }
  };
</script>
